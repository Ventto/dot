env:
  TERM: xterm-256color

window:
  dimensions:
    columns: 0
    lines: 0

  padding:
    x: 0
    y: 0

  opacity: 0.9
  dynamic_title: true

  # Window decorations
  #
  # Available values:
  # - `full`: Window with title bar and title bar buttons
  # - `none`: Window without title bar, rounded corners, or drop shadow
  # - `transparent`: Window with title bar with transparent background and title
  #   bar buttons
  # - `buttonless`: Window with title bar with transparent background and no
  #   title bar buttons
  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #     - buttonless: Title bar, transparent background and title bar buttons
  #     - transparent: Title bar, transparent background, but no title bar buttons
  decorations: full

  option_as_alt: both

scrolling:
  # How many lines of scrollback to keep,
  # '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line
  # scrolled when scrollback is enabled (history > 0).
  multiplier: 3

  # Faux Scrolling
  #
  # The `faux_multiplier` setting controls the number
  # of lines the terminal should scroll when the alternate
  # screen buffer is active. This is used to allow mouse
  # scrolling for applications like `man`.
  #
  # To disable this completely, set `faux_multiplier` to 0.
  faux_multiplier: 3

  # Scroll to the bottom when new text is written to the terminal.
  auto_scroll: false

# Font configurations
font:
  normal:
    family: SauceCodePro Nerd Font
    style: Regular

  bold:
    family: SauceCodePro Nerd Font
    style: Bold

  italic:
    family: SauceCodePro Nerd Font
    style: Italic

  # Point size
  size: 11.0

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  glyph_offset:
    x: 0
    y: 0

  # Scale the font size based on the monitor's DPI. This will lead to bigger text on HiDPI
  # screens and make reading text a little easier.
  scale_with_dpi: true

# Display the time it takes to redraw each frame.
render_timer: false

# Use custom cursor colors. If `true`, the `colors.cursor.foreground` and
# `colors.cursor.background` colors will be used to display the cursor.
# Otherwise the cell colors are inverted for the cursor.
custom_cursor_colors: false

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

# Colors (Dracula)
colors:
  # Default colors
  primary:
    background: '0x292b2e'
    foreground: '0xf8f8f2'

    # Bright and dim foreground colors
    #
    # The dimmed foreground color is calculated automatically if it is not present.
    # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`
    # is `false`, the normal foreground color will be used.
    #dim_foreground: '0x9a9a9a'
    #bright_foreground: '0xffffff'

  # Cursor colors
  #
  # Colors which should be used to draw the terminal cursor. If these are unset,
  # the cursor color will be the inverse of the cell color.
  cursor:
    text: '0x44475a'
    cursor: '0xf8f8f2'

  # Selection colors
  #
  # Colors which should be used to draw the selection area. If selection
  # background is unset, selection color will be the inverse of the cell colors.
  # If only text is unset the cell text color will remain the same.
  selection:
    text: '0xf8f8f2'
    background: '0x44475a'

  # Normal colors
  normal:
    black:   '0x000000'
    red:     '0xe53238'
    green:   '0x99cc66'
    yellow:  '0xcc9966'
    blue:    '0x5294e2'
    magenta: '0xed6666'
    cyan:    '0x66cccc'
    white:   '0xbfbfbf'

  bright:
    black:   '0x4d4d4d'
    red:     '0xff6e67'
    green:   '0x5af78e'
    yellow:  '0xf4f99d'
    blue:    '0xcaa9fa'
    magenta: '0xff92d0'
    cyan:    '0x9aedfe'
    white:   '0xe6e6e6'

  # Indexed Colors
  #
  # The indexed colors include all colors from 16 to 256.
  # When these are not set, they're filled with sensible defaults.
  #
  # Example:
  #   `- { index: 16, color: '0xff00ff' }`
  #
  indexed_colors: []

selection:
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true

mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }
  faux_scrolling_lines: 1
  hide_when_typing: false

cursor:
  # Style values:
  #   - Block
  #   - Underline
  #   - Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
shell:
  program: /bin/zsh

key_bindings:
  - { key: Key0,     mods: Control,       action: ResetFontSize      }
  - { key: Equals,   mods: Control,       action: IncreaseFontSize   }
  - { key: Minus,    mods: Control,       action: DecreaseFontSize   }
  - { key: Paste,                         action: Paste              }
  - { key: Copy,                          action: Copy               }
  - { key: L,        mods: Control,       action: ClearLogNotice     }
  - { key: L,        mods: Control,       chars: "\x0c"              }
  - { key: T,        mods: Control|Shift,       action: SpawnNewInstance, mode: ~AppCursor }
    # Cursor home (based on builtin keybinding C-A)
  - { key: Q,        mods: Control,       chars: "\x01",            mode: ~AppCursor }
  - { key: Left,     mods: Shift,         chars: "\x01",            mode: ~AppCursor }
  - { key: Left,     mods: Shift,         chars: "\x1b[1;2D",       mode: AppCursor  }
    # Cursor end (based on builtin keybinding C-E)
  - { key: Right,    mods: Shift,         chars: "\x05",            mode: ~AppCursor }
  - { key: Right,    mods: Shift,         chars:  "\x1b[1;2C",      mode: AppCursor }
    # Page Up
  - { key: Up,       mods: Shift,         action: ScrollPageUp,     mode: ~AppCursor }
  - { key: Up,       mods: Shift,         chars: "\x1b[1;2A",       mode: AppCursor  }
    # Page Down
  - { key: Down,     mods: Shift,         action: ScrollPageDown,   mode: ~AppCursor }
  - { key: Down,     mods: Shift,         chars: "\x1b[1;2B",       mode: AppCursor  }
  - { key: Up,       mods: Control|Shift, action: ScrollToTop,      mode: ~AppCursor }
  - { key: Down,     mods: Control|Shift, action: ScrollToBottom,   mode: ~AppCursor }

  # In Neovim, we could not map <CTRL+'> so far. We turn it into <CTRL+Right>.
  #- { key: 40,       mods: Control,       chars: "\x1b[1;5C"                 }
