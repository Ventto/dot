#!/bin/bash
#
# Controls the volume level and sends a notification (c.f usage() below).
#
# For custom display, add the following lines to the mako's config file:
#
# ```
#   [app-name=volumectl]
#   font=Font Awesome 5 Free Solid 14
#   format=%s
#
#   [app-name=error]
#   format=<b>%s</b>
# ```
#

set -e

. "${HOME}/.local/lib/notify_helper.sh"


prog="volumectl"
_die()
{
    notify_err "$prog" "Error"
    exit "$1"
}

# Get the index of the selected sink:
_get_sink() {
    pacmd list-sinks | awk '/index:/{i++} /* index:/{print i; exit}'
}

# Get the selected sink volume
_get_volume() {
    pacmd list-sinks | \
        awk "/^\\svolume:/{i++} i==$(_get_sink){print \$5; exit}" | \
        sed 's/.$//'
}

_default_sink_is_muted()
{
    ##
    # In the pacmd's output, the default sink is marked with an asterisk
    # followed by its index (ex: '[[:space:]]* index: 2').
    # We look for that index and we extract its following properties
    # without including the index.
    output="$(pacmd list-sinks | grep -E '^  \* index: [0-9]+' -A 30 | \
              tail -n +2)"

    while read -r line; do
        ##
        # If we found another index it means we are done with the properties
        # of the default sink.
        if echo "$line" | grep -E 'index: [0-9]' >/dev/null 2>&1; then
            break
        fi
        if echo "$line" | grep -E 'muted' >/dev/null 2>&1; then
            muted="$(echo "$line" | sed -n 's/.*muted: \([a-z]\+\)/\1/p')"
            set +e
            [ "$muted" = "yes" ] && return 0 || return 1
            break
        fi
        i=$((i+1))
    done < <(echo "$output")
    return 2
}

_volume_set_level()
{
    _sign="$1"

    if [ "$_sign" = '+' ] && [ "$(_get_volume)" -ge 100 ]; then
        icon="volume_up"
        summary="$(notify_print_bar "ï„‘  " 10)"
        return
    fi

    [ "$_sign" = '+' ] && icon="volume_up" || icon="volume_down"

    if ! pactl set-sink-volume @DEFAULT_SINK@ "$_sign"10% ; then
        _die 1
    fi

    if [ "$(_get_volume)" -eq 0 ]; then
        icon="volume_off"
    fi
    summary="$(notify_percent_to_summary "$(_get_volume)")"
}

_volume_toggle()
{
    if ! pactl set-sink-mute @DEFAULT_SINK@ toggle; then
        _die 1
    fi
    ret=$(_default_sink_is_muted; echo "$?";)
    case $ret in
        0) icon="volume_off"; summary="Muted";;
        1) icon="volume_up";  summary="Unmuted";;
        2) _die 1;;
    esac
}

_usage()
{
    desc='Sets the volume and sends a notification.'
    args='  ACTION    "+", "-" or "toggle" '
    printf 'Usage: %s ACTION\n\n%s\n\nArgument:\n%s\n' "$prog" "$desc" "$args"
}

main()
{
    [ "$#" -ne 1 ] && { _usage; _die 2; }
    case $1 in
        -|+) _volume_set_level "$1";;
        toggle) _volume_toggle;;
        *) _usage; _die 2;;
    esac
    notify_log "$prog" "$icon" "$summary"
}
main "$@"
